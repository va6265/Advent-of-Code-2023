//#include <ext/pb_ds/assoc_container.hpp>
#include <iostream>
#include <fstream>
#include <algorithm>
#include <climits>
#include <cmath>
#include <string>
#include <vector>
#include <deque>
#include <set>
#include <map>
#include <unordered_map>
#include <queue>
#include <numeric>
#include <stack>
#include <iomanip>

using namespace std;
//using namespace __gnu_pbds;

typedef long long int ll;

#define mod 1000000007
ll gcd(ll a,ll b){
    if(b==0)
        return a;
    return gcd(b,a%b);
}
ll __lcm(ll a,ll b){
    return a*b/gcd(a,b);
}
int power(ll a, ll b) {
    ll r = 1;
    while(b) {
        if (b & 1)
            r = (r * a) % mod;
        a = (a * a) % mod;
        b >>= 1;
    }
    return r;
}
int inv_mod(ll a) {
    return power(a, mod-2);
}

ll calc(ll n){
    return n*(n+1)/2;
}

ll f(ll n){
    return n*(n+1)/2;
}

void solve() {
    vector<string> words;
    string line;
    ifstream myfile("/Users/vaibhavagarwal/CLionProjects/codeforces/input.txt");
    if (myfile.is_open())
    {
        while ( getline (myfile,line) ){
            words.push_back(line);
        }
        myfile.close();
    }
    else cout << "Unable to open file";
    cin.clear();

    map<string,int> mp;
    mp["one"] =1; mp["two"]=2; mp["three"]=3; mp["four"]=4; mp["five"]=5; mp["six"]=6; mp["seven"]=7; mp["eight"]=8; mp["nine"]=9;
    mp["1"]=1,mp["2"]=2,mp["3"]=3,mp["4"]=4,mp["5"]=5,mp["6"]=6,mp["7"]=7,mp["8"]=8,mp["9"]=9;

    ll ans = 0;
    for(string &word: words){
        int first = INT_MAX , last = -1;
        int a=0,b=0;
        for(auto &[s,n]: mp){
            int f1 = word.find(s);
            int f2 = word.rfind(s);
            if(f1 != -1) {
                if (f1 < first) {
                    first = f1;
                    a=n;
                }
                if(f2>last){
                    last=f2;
                    b=n;
                }
            }
        }
        if(a*10+b==0)
            cout<<word<<'\n';
        ans += a*10+b;
    }
    cout<<ans<<'\n';
}

int main() {
    ios::sync_with_stdio(0);
    cin.tie(0);
    int test_cases;
//    cin >> test_cases;
    test_cases = 1;
    while (test_cases--) {
        solve();
    }
}

/*
 *
 */